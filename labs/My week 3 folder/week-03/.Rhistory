pct_white = (WhiteE / totalE) * 100,
pct_black = (Black_African_AmericanE / totalE) * 100,
pct_hispanic = (Hispanic_LatinoE / totalE) * 100
)
# Create percentages for white, Black, and Hispanic populations
#done above
# Add readable tract and county name columns using str_extract() or similar
#tract_race_data = tract_race_data %>%
#mutate(county = NAME %>%
# str_remove(" County, California")
#)
glimpse(tract_race_data)
View(tract_race_data)
# Define your race/ethnicity variables with descriptive names
race_variables = c(
White = "B03002_003",
Black_African_American = "B03002_004",
Hispanic_Latino = "B03002_012",
total = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
tract_race_data = get_acs(
geography = "tract",
variables = race_variables,
state = "CA",
county = c("003","069","095"),
year = 2022,
survey = "acs5",
output = "wide"
)
# Calculate percentage of each group using mutate()
tract_race_data = tract_race_data %>%
mutate(
pct_white = (WhiteE / totalE) * 100,
pct_black = (Black_African_AmericanE / totalE) * 100,
pct_hispanic = (Hispanic_LatinoE / totalE) * 100
)
# Create percentages for white, Black, and Hispanic populations
#done above
# Add readable tract and county name columns using str_extract() or similar
library(dplyr)
library(stringr)
tract_race_data <- tract_race_data %>%
mutate(
Tract = str_extract(NAME, "Census Tract [0-9]+"),
County = str_extract(NAME, "(?<=; ).*(?= County;)")
)
glimpse(tract_race_data)
View(tract_race_data)
# Define your race/ethnicity variables with descriptive names
race_variables = c(
White = "B03002_003",
Black_African_American = "B03002_004",
Hispanic_Latino = "B03002_012",
total = "B03002_001"
)
# Use get_acs() to retrieve tract-level data
# Hint: You may need to specify county codes in the county parameter
tract_race_data = get_acs(
geography = "tract",
variables = race_variables,
state = "CA",
county = c("003","069","095"),
year = 2022,
survey = "acs5",
output = "wide"
)
# Calculate percentage of each group using mutate()
tract_race_data = tract_race_data %>%
mutate(
pct_white = (WhiteE / totalE) * 100,
pct_black = (Black_African_AmericanE / totalE) * 100,
pct_hispanic = (Hispanic_LatinoE / totalE) * 100
)
# Create percentages for white, Black, and Hispanic populations
#done above
# Add readable tract and county name columns using str_extract() or similar
library(dplyr)
library(stringr)
tract_race_data = tract_race_data %>%
mutate(
Tract = str_extract(NAME, "Census Tract [0-9]+"),
County = str_extract(NAME, "(?<=; ).*(?= County;)")
)
glimpse(tract_race_data)
View(tract_race_data)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
highest_pct_hisp = tract_race_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(pct_hispanic, County, Tract,)
glimpse(highest_pct_hisp)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
# Create a nicely formatted table of your results using kable()
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
highest_pct_hisp = tract_race_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(pct_hispanic, County, Tract,)
glimpse(highest_pct_hisp)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
tract_race_data_summary = tract_race_data %>%
group_by(County) %>%
summarize(
num_tracts = n(),
mean_pct_white = mean(pct_white, na.rm = TRUE),
mean_pct_black = mean(pct_black, na.rm = TRUE),
mean_pct_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(tract_race_data_summary,
col.names = c("Number of Tracts","Mean Percent White", "Mean Percent Black", "Mean Percent Hispanic"),
caption = "Summary of Average Demographics"
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
highest_pct_hisp = tract_race_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(pct_hispanic, County, Tract,)
glimpse(highest_pct_hisp)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
tract_race_data_summary = tract_race_data %>%
group_by(County) %>%
summarize(
num_tracts = n(),
mean_pct_white = mean(pct_white, na.rm = TRUE),
mean_pct_black = mean(pct_black, na.rm = TRUE),
mean_pct_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(tract_race_data_summary,
col.names = c("Number of Tracts","Mean Percent White", "Mean Percent Black", "Mean Percent Hispanic"),
caption = "Summary of Average Demographics"
)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
highest_pct_hisp = tract_race_data %>%
arrange(desc(pct_hispanic)) %>%
slice(1) %>%
select(pct_hispanic, County, Tract,)
glimpse(highest_pct_hisp)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
tract_race_data_summary = tract_race_data %>%
group_by(County) %>%
summarize(
num_tracts = n(),
mean_pct_white = mean(pct_white, na.rm = TRUE),
mean_pct_black = mean(pct_black, na.rm = TRUE),
mean_pct_hispanic = mean(pct_hispanic, na.rm = TRUE)
)
# Create a nicely formatted table of your results using kable()
kable(tract_race_data_summary,
col.names = c("County","Number of Tracts","Mean Percent White", "Mean Percent Black", "Mean Percent Hispanic"),
caption = "Summary of Average Demographics"
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
glimpse(tract_race_data_moe)
View(tract_race_data_summary)
View(tract_race_data_moe_summary)
View(tract_race_data_moe)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$Black_African_American_moe <- as.numeric(tract_race_data_moe$Black_African_American_moe)
tract_race_data_moe$Hispanic_Latino_moe <- as.numeric(tract_race_data_moe$Hispanic_Latino_moe)
tract_race_data_moe$White_moe <- as.numeric(tract_race_data_moe$White_moe)
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
View(tract_race_data_moe)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$Black_African_American_moe <- as.numeric(tract_race_data_moe$Black_African_American_moe)
tract_race_data_moe$Hispanic_Latino_moe <- as.numeric(tract_race_data_moe$Hispanic_Latino_moe)
tract_race_data_moe$White_moe <- as.numeric(tract_race_data_moe$White_moe)
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe = tract_race_data_moe %>%
mutate(
Black_African_AmericanM = as.numeric(as.character(Black_African_AmericanM)),
Black_African_AmericanE = as.numeric(as.character(Black_African_AmericanE)),
Hispanic_LatinoM = as.numeric(as.character(Hispanic_LatinoM)),
Hispanic_LatinoE = as.numeric(as.character(Hispanic_LatinoE)),
WhiteM = as.numeric(as.character(WhiteM)),
WhiteE = as.numeric(as.character(WhiteE))
)
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data_moe %>%
mutate(
Black_African_AmericanM = as.numeric(as.character(Black_African_AmericanM)),
Black_African_AmericanE = as.numeric(as.character(Black_African_AmericanE)),
Hispanic_LatinoM = as.numeric(as.character(Hispanic_LatinoM)),
Hispanic_LatinoE = as.numeric(as.character(Hispanic_LatinoE)),
WhiteM = as.numeric(as.character(WhiteM)),
WhiteE = as.numeric(as.character(WhiteE))
)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_race_data_moe = tract_race_data %>%
mutate(Black_African_American_moe = (Black_African_AmericanM / Black_African_AmericanE) * 100,
Hispanic_Latino_moe = (Hispanic_LatinoM / Hispanic_LatinoE) * 100,
White_moe = (WhiteM / WhiteE) * 100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_race_data_moe$has_high_moe = ifelse(
tract_race_data_moe$Black_African_American_moe > 15 |
tract_race_data_moe$Hispanic_Latino_moe > 15 |
tract_race_data_moe$White_moe > 15,
TRUE,
FALSE
)
# Create summary statistics showing how many tracts have data quality issues
tract_race_data_moe_summary = tract_race_data_moe %>%
group_by(County) %>%
filter(has_high_moe == TRUE) %>%       # so that the count reflects only tracts with data quality issues
summarize(
total_tracts = n(),
tracts_high_moe = sum(has_high_moe, na.rm = TRUE),
)
kable(tract_race_data_moe_summary,
col.names = c("County","Total Tracts","Tracts with Quality Issues"),
caption = "Tracts with data quality issues"
)
# Group tracts by whether they have high MOE issues
tract_race_data_pattern = tract_race_data_moe %>%
group_by(has_high_moe)
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
#The demographic percentages were already calculated so I will summarize the mean for each.
tract_race_data_pattern_summary = tract_race_data_pattern %>%
summarize(
Population_Size = sum(totalE, na.rm = TRUE),
mean_pct_white = mean(White, na.rm = TRUE),
mean_pct_black = mean(Black_African_American, na.rm = TRUE),
mean_pct_hispanic = mean(Hispanic_Latino, na.rm = TRUE)
)
# Group tracts by whether they have high MOE issues
tract_race_data_pattern = tract_race_data_moe %>%
group_by(has_high_moe)
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
#The demographic percentages were already calculated so I will summarize the mean for each.
tract_race_data_pattern_summary = tract_race_data_pattern %>%
summarize(
Population_Size = sum(totalE, na.rm = TRUE),
mean_pct_white = mean(WhiteE, na.rm = TRUE),
mean_pct_black = mean(Black_African_AmericanE, na.rm = TRUE),
mean_pct_hispanic = mean(Hispanic_LatinoE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(tract_race_data_pattern_summary,
col.names = c("Has a High MOE ","Population Size", "Mean Percent White", "Mean Percent Black/African American", "Mean Percent Hispanic/Latino"),
caption = "Pattern Analysis, Average Characteristics"
)
# Group tracts by whether they have high MOE issues
tract_race_data_pattern = tract_race_data_moe %>%
group_by(has_high_moe)
# Calculate average characteristics for each group:
# - population size, demographic percentages
# Use group_by() and summarize() to create this comparison
#The demographic percentages were already calculated so I will summarize the mean for each.
tract_race_data_pattern = tract_race_data_moe %>%
group_by(has_high_moe)
tract_race_data_pattern_summary = tract_race_data_pattern %>%
summarize(
Population_Size = sum(totalE, na.rm = TRUE),
mean_pct_white = mean(WhiteE, na.rm = TRUE),
mean_pct_black = mean(Black_African_AmericanE, na.rm = TRUE),
mean_pct_hispanic = mean(Hispanic_LatinoE, na.rm = TRUE)
)
# Create a professional table showing the patterns
kable(tract_race_data_pattern_summary,
col.names = c("Has a High MOE ","Population Size", "Mean Percent White", "Mean Percent Black/African American", "Mean Percent Hispanic/Latino"),
caption = "Pattern Analysis: Average Characteristics"
)
View(california_data_moe)
View(california_data_reliability_summary)
View(california_data_reliability)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
california_data_reliability_summary_2 = california_data_reliability %>%
group_by(county) %>%
summarize(
median_income = mean(median_household_incomeE, na.rm = TRUE),
moe_percentage = mean(median_income_moe, na.rm = TRUE),
reliability = first(income_reliability)
)
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
%>%
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
california_data_reliability_summary_2 = california_data_reliability %>%
group_by(county) %>%
summarize(
median_income = mean(median_household_incomeE, na.rm = TRUE),
moe_percentage = mean(median_income_moe, na.rm = TRUE),
reliability = first(income_reliability)
)%>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
algorithmic_recommendation = case_when(
reliability == "High Confidence" ~ "Safe for algorithmic decisions",
reliability == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
reliability == "Low Confidence" ~ "Requires manual review or additional data",
TRUE ~ "Unclassified"
)
)
# Format as a professional table with kable()
kable(
california_data_reliability_summary_2,
col.names = c("County", "Median Income", "Margin of Error", "Reliability", "Algorithmic Recommendation"),
caption = "County Data Reliability Summary"
)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
california_data_reliability_summary_2 = california_data_reliability %>%
group_by(county) %>%
summarize(
median_income = mean(median_household_incomeE, na.rm = TRUE),
moe_percentage = mean(median_income_moe, na.rm = TRUE),
reliability = first(income_reliability)
)%>%
# Add a new column with algorithm recommendations using case_when():
# - High Confidence: "Safe for algorithmic decisions"
# - Moderate Confidence: "Use with caution - monitor outcomes"
# - Low Confidence: "Requires manual review or additional data"
mutate(
algorithmic_recommendation = case_when(
reliability == "High Confidence" ~ "Safe for algorithmic decisions",
reliability == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
reliability == "Low Confidence" ~ "Requires manual review or additional data",
TRUE ~ "Unclassified"
)
)
# Format as a professional table with kable()
kable(
california_data_reliability_summary_2,
col.names = c("County", "Median Income", "MOE", "Reliability", "Algorithmic Recommendation"),
caption = "County Data Reliability Summary"
)
